{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "# Spark ETL Modeling - Scaling Data 100x with Multiple Sources\n",
    "### Data Engineering Project\n",
    "\n",
    "#### Project Summary\n",
    "--T**he Final project consist of combinning all skills learned in the course to perform ETL and data engineering on large datasets. By the end of this project, I will show a very consice etl of 2 datasets that will be a reason for creating analytical insights in a dashboards that can help individuals make better decisions on their tasks. I am choosing two datasets from Immigraion and Temperature data which has a very high level data usage. My goal is to clean and transfrom the data and join them by creating a dimension  and fact tables. Along with saving into a file format**--\n",
    "\n",
    "The project follows the follow steps:\n",
    "* Step 1: Scope the Project and Gather Data\n",
    "* Step 2: Explore and Assess the Data\n",
    "* Step 3: Define the Data Model\n",
    "* Step 4: Run ETL to Model the Data\n",
    "* Step 5: Complete Project Write Up"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Do all imports and installs here\n",
    "import pandas as pd\n",
    "import os\n",
    "import glob\n",
    "import re\n",
    "from datetime import datetime, timedelta\n",
    "from pprint import pprint\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import count, col, udf, year, month, avg, round, dayofweek, weekofyear, isnull\n",
    "from pyspark.sql.types import StringType, IntegerType\n",
    "from pyspark.sql.functions import isnan, when, count, col, translate, to_date, broadcast\n",
    "from pyspark.sql import functions as sf\n",
    "from pyspark.sql import types as T\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Create Spark session\n",
    "spark = SparkSession.builder.\\\n",
    "config(\"spark.jars.packages\",\"saurfang:spark-sas7bdat:2.0.0-s_2.11\")\\\n",
    ".enableHiveSupport().getOrCreate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "# Step 1: Scope the Project and Gather Data\n",
    "\n",
    "#### Scope \n",
    "#### Describe and Gather Data \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "* I94 Immigration Data: This data comes from the US National Tourism and Trade Office. A data dictionary is included in the workspace. This is where the data comes from. There's a sample file so you can take a look at the data in csv format before reading it all in. You do not have to use the entire dataset, just use what you need to accomplish the goal you set at the beginning of the project.\n",
    "* World Temperature Data: This dataset came from Kaggle. You can read more about it here.\n",
    "* U.S. City Demographic Data: This data comes from OpenSoft. You can read more about it here.\n",
    "* Airport Code Table: This is a simple table of airport codes and corresponding cities. It comes from here.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### Reading Data Files from SAS and CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Reading I94 Immigration Data data\n",
    "# Using sample of I94 data; April 16\n",
    "i94_fpath = \"../../data/18-83510-I94-Data-2016/i94_apr16_sub.sas7bdat\"\n",
    "i94_df = spark.read.format(\"com.github.saurfang.sas.spark\").load(i94_fpath)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Read temperature data\n",
    "temp_fname = \"../../data2/GlobalLandTemperaturesByCity.csv\"\n",
    "temp_df = spark.read.format(\"csv\").option(\"delimiter\", \",\").option(\"header\", \"true\").load(temp_fname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Read demographics data\n",
    "demo_fname = \"us-cities-demographics.csv\"\n",
    "demo_df = spark.read.format(\"csv\").option(\"delimiter\", \";\").option(\"header\", \"true\").load(demo_fname)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "### Step 2: Explore and Assess the Data\n",
    "#### Cleaning Steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### Data Exploration of I94 Immigrations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# number of rows in the data\n",
    "i94_df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - Since number of rows are very high, I am going to take a sample to perform wrangling and transformation\n",
    "* Full Data: i94_df\n",
    "* Sample Data: sample_i94_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cicid</th>\n",
       "      <th>i94yr</th>\n",
       "      <th>i94mon</th>\n",
       "      <th>i94cit</th>\n",
       "      <th>i94res</th>\n",
       "      <th>i94port</th>\n",
       "      <th>arrdate</th>\n",
       "      <th>i94mode</th>\n",
       "      <th>i94addr</th>\n",
       "      <th>depdate</th>\n",
       "      <th>...</th>\n",
       "      <th>entdepu</th>\n",
       "      <th>matflag</th>\n",
       "      <th>biryear</th>\n",
       "      <th>dtaddto</th>\n",
       "      <th>gender</th>\n",
       "      <th>insnum</th>\n",
       "      <th>airline</th>\n",
       "      <th>admnum</th>\n",
       "      <th>fltno</th>\n",
       "      <th>visatype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>692.0</td>\n",
       "      <td>692.0</td>\n",
       "      <td>XXX</td>\n",
       "      <td>20573.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>U</td>\n",
       "      <td>None</td>\n",
       "      <td>1979.0</td>\n",
       "      <td>10282016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>1.897628e+09</td>\n",
       "      <td>None</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>254.0</td>\n",
       "      <td>276.0</td>\n",
       "      <td>ATL</td>\n",
       "      <td>20551.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>AL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>None</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>D/S</td>\n",
       "      <td>M</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>3.736796e+09</td>\n",
       "      <td>00296</td>\n",
       "      <td>F1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>15.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>WAS</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>20691.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1961.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>M</td>\n",
       "      <td>None</td>\n",
       "      <td>OS</td>\n",
       "      <td>6.666432e+08</td>\n",
       "      <td>93</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MA</td>\n",
       "      <td>20567.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AA</td>\n",
       "      <td>9.246846e+10</td>\n",
       "      <td>00199</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MA</td>\n",
       "      <td>20567.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>2012.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AA</td>\n",
       "      <td>9.246846e+10</td>\n",
       "      <td>00199</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>18.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>MI</td>\n",
       "      <td>20555.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1959.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AZ</td>\n",
       "      <td>9.247104e+10</td>\n",
       "      <td>00602</td>\n",
       "      <td>B1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NJ</td>\n",
       "      <td>20558.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1953.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AZ</td>\n",
       "      <td>9.247140e+10</td>\n",
       "      <td>00602</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>20.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NJ</td>\n",
       "      <td>20558.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1959.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AZ</td>\n",
       "      <td>9.247161e+10</td>\n",
       "      <td>00602</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>21.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NY</td>\n",
       "      <td>20553.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1970.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AZ</td>\n",
       "      <td>9.247080e+10</td>\n",
       "      <td>00602</td>\n",
       "      <td>B2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>22.0</td>\n",
       "      <td>2016.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>101.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>20545.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NY</td>\n",
       "      <td>20562.0</td>\n",
       "      <td>...</td>\n",
       "      <td>None</td>\n",
       "      <td>M</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>09302016</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>AZ</td>\n",
       "      <td>9.247849e+10</td>\n",
       "      <td>00608</td>\n",
       "      <td>B1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   cicid   i94yr  i94mon  i94cit  i94res i94port  arrdate  i94mode i94addr  \\\n",
       "0    6.0  2016.0     4.0   692.0   692.0     XXX  20573.0      NaN    None   \n",
       "1    7.0  2016.0     4.0   254.0   276.0     ATL  20551.0      1.0      AL   \n",
       "2   15.0  2016.0     4.0   101.0   101.0     WAS  20545.0      1.0      MI   \n",
       "3   16.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      MA   \n",
       "4   17.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      MA   \n",
       "5   18.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      MI   \n",
       "6   19.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      NJ   \n",
       "7   20.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      NJ   \n",
       "8   21.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      NY   \n",
       "9   22.0  2016.0     4.0   101.0   101.0     NYC  20545.0      1.0      NY   \n",
       "\n",
       "   depdate   ...     entdepu  matflag  biryear   dtaddto gender insnum  \\\n",
       "0      NaN   ...           U     None   1979.0  10282016   None   None   \n",
       "1      NaN   ...           Y     None   1991.0       D/S      M   None   \n",
       "2  20691.0   ...        None        M   1961.0  09302016      M   None   \n",
       "3  20567.0   ...        None        M   1988.0  09302016   None   None   \n",
       "4  20567.0   ...        None        M   2012.0  09302016   None   None   \n",
       "5  20555.0   ...        None        M   1959.0  09302016   None   None   \n",
       "6  20558.0   ...        None        M   1953.0  09302016   None   None   \n",
       "7  20558.0   ...        None        M   1959.0  09302016   None   None   \n",
       "8  20553.0   ...        None        M   1970.0  09302016   None   None   \n",
       "9  20562.0   ...        None        M   1968.0  09302016   None   None   \n",
       "\n",
       "  airline        admnum  fltno visatype  \n",
       "0    None  1.897628e+09   None       B2  \n",
       "1    None  3.736796e+09  00296       F1  \n",
       "2      OS  6.666432e+08     93       B2  \n",
       "3      AA  9.246846e+10  00199       B2  \n",
       "4      AA  9.246846e+10  00199       B2  \n",
       "5      AZ  9.247104e+10  00602       B1  \n",
       "6      AZ  9.247140e+10  00602       B2  \n",
       "7      AZ  9.247161e+10  00602       B2  \n",
       "8      AZ  9.247080e+10  00602       B2  \n",
       "9      AZ  9.247849e+10  00608       B1  \n",
       "\n",
       "[10 rows x 28 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert to pandas and limit data .\n",
    "sample_i94_df = i94_df.limit(50000).toPandas()\n",
    "sample_i94_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### -  Lets get the number of columns and data type of the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28\n"
     ]
    }
   ],
   "source": [
    "# number of columns\n",
    "print(len(sample_i94_df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - Lets look deeper in the data and discover how many nulls do we have in each column.\n",
    "#### - We need to use full dataframe not sample."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# count and display the total of nulls in each column\n",
    "i94_null = i94_df.select([count(when(col(c).isNull(), c)).alias(c) for c in i94_df.columns]).toPandas()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cicid</th>\n",
       "      <th>i94yr</th>\n",
       "      <th>i94mon</th>\n",
       "      <th>i94cit</th>\n",
       "      <th>i94res</th>\n",
       "      <th>i94port</th>\n",
       "      <th>arrdate</th>\n",
       "      <th>i94mode</th>\n",
       "      <th>i94addr</th>\n",
       "      <th>depdate</th>\n",
       "      <th>...</th>\n",
       "      <th>entdepu</th>\n",
       "      <th>matflag</th>\n",
       "      <th>biryear</th>\n",
       "      <th>dtaddto</th>\n",
       "      <th>gender</th>\n",
       "      <th>insnum</th>\n",
       "      <th>airline</th>\n",
       "      <th>admnum</th>\n",
       "      <th>fltno</th>\n",
       "      <th>visatype</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>239</td>\n",
       "      <td>152592</td>\n",
       "      <td>142457</td>\n",
       "      <td>...</td>\n",
       "      <td>3095921</td>\n",
       "      <td>138429</td>\n",
       "      <td>802</td>\n",
       "      <td>477</td>\n",
       "      <td>414269</td>\n",
       "      <td>2982605</td>\n",
       "      <td>83627</td>\n",
       "      <td>0</td>\n",
       "      <td>19549</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   cicid  i94yr  i94mon  i94cit  i94res  i94port  arrdate  i94mode  i94addr  \\\n",
       "0      0      0       0       0       0        0        0      239   152592   \n",
       "\n",
       "   depdate    ...     entdepu  matflag  biryear  dtaddto  gender   insnum  \\\n",
       "0   142457    ...     3095921   138429      802      477  414269  2982605   \n",
       "\n",
       "   airline  admnum  fltno  visatype  \n",
       "0    83627       0  19549         0  \n",
       "\n",
       "[1 rows x 28 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "i94_null.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - Lets visulize the highest nulls "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fedb4d17898>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the df nulls\n",
    "row = i94_null.iloc[0]\n",
    "row.plot(kind='bar')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - As we can see from the null analysis, we have columns that have huge nulls. So I am going to drop these columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- cicid: double (nullable = true)\n",
      " |-- i94yr: double (nullable = true)\n",
      " |-- i94mon: double (nullable = true)\n",
      " |-- i94cit: double (nullable = true)\n",
      " |-- i94res: double (nullable = true)\n",
      " |-- i94port: string (nullable = true)\n",
      " |-- arrdate: double (nullable = true)\n",
      " |-- i94mode: double (nullable = true)\n",
      " |-- i94addr: string (nullable = true)\n",
      " |-- depdate: double (nullable = true)\n",
      " |-- i94bir: double (nullable = true)\n",
      " |-- i94visa: double (nullable = true)\n",
      " |-- count: double (nullable = true)\n",
      " |-- dtadfile: string (nullable = true)\n",
      " |-- visapost: string (nullable = true)\n",
      " |-- entdepa: string (nullable = true)\n",
      " |-- entdepd: string (nullable = true)\n",
      " |-- matflag: string (nullable = true)\n",
      " |-- biryear: double (nullable = true)\n",
      " |-- dtaddto: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- airline: string (nullable = true)\n",
      " |-- admnum: double (nullable = true)\n",
      " |-- fltno: string (nullable = true)\n",
      " |-- visatype: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# drop col that has high value of nulls \n",
    "drop_col = (\"occup\",\"entdepu\",\"insnum\")\n",
    "i94_df = i94_df.drop(*drop_col)\n",
    "i94_df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>trip_type</th>\n",
       "      <th>visa_type</th>\n",
       "      <th>count</th>\n",
       "      <th>arrival_date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>936.0</td>\n",
       "      <td>NEW</td>\n",
       "      <td>NY</td>\n",
       "      <td>50.0</td>\n",
       "      <td>M</td>\n",
       "      <td>2.0</td>\n",
       "      <td>WT</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>976.0</td>\n",
       "      <td>NEW</td>\n",
       "      <td>NY</td>\n",
       "      <td>46.0</td>\n",
       "      <td>F</td>\n",
       "      <td>2.0</td>\n",
       "      <td>WT</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>978.0</td>\n",
       "      <td>NEW</td>\n",
       "      <td>NY</td>\n",
       "      <td>32.0</td>\n",
       "      <td>M</td>\n",
       "      <td>2.0</td>\n",
       "      <td>WT</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1156.0</td>\n",
       "      <td>WAS</td>\n",
       "      <td>DC</td>\n",
       "      <td>44.0</td>\n",
       "      <td>F</td>\n",
       "      <td>2.0</td>\n",
       "      <td>WT</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016-04-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1485.0</td>\n",
       "      <td>NYC</td>\n",
       "      <td>NY</td>\n",
       "      <td>43.0</td>\n",
       "      <td>M</td>\n",
       "      <td>2.0</td>\n",
       "      <td>WT</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2016-04-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id city state   age gender  trip_type visa_type  count arrival_date\n",
       "0   936.0  NEW    NY  50.0      M        2.0        WT    1.0   2016-04-01\n",
       "1   976.0  NEW    NY  46.0      F        2.0        WT    1.0   2016-04-01\n",
       "2   978.0  NEW    NY  32.0      M        2.0        WT    1.0   2016-04-01\n",
       "3  1156.0  WAS    DC  44.0      F        2.0        WT    1.0   2016-04-01\n",
       "4  1485.0  NYC    NY  43.0      M        2.0        WT    1.0   2016-04-01"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preparing and renameing the columns to be more clear.\n",
    "# Drop duplicates if any\n",
    "cleaned_i94_df = i94_df.select(\n",
    "    col(\"cicid\").alias(\"id\"), \n",
    "    col(\"arrdate\").alias(\"arrdate\"),\n",
    "    col(\"i94port\").alias(\"city\"),\n",
    "    col(\"i94addr\").alias(\"state\"),\n",
    "    col(\"i94bir\").alias(\"age\"),\n",
    "    col(\"gender\").alias(\"gender\"),\n",
    "    col(\"i94visa\").alias(\"trip_type\"),\n",
    "    col(\"visatype\").alias(\"visa_type\"),\n",
    "    \"count\").drop_duplicates()\n",
    "\n",
    "def convert_datetime(x):\n",
    "    \"\"\"\n",
    "    parm: raw sas datetime: converting the time format to YYYY-MM-DD\n",
    "    \"\"\"\n",
    "    try:\n",
    "        start = datetime(1960, 1, 1)\n",
    "        return start + timedelta(days=int(x))\n",
    "    except:\n",
    "        return None\n",
    "i94_date_convert = udf(lambda x: convert_datetime(x), T.DateType())\n",
    "\n",
    "cleaned_i94_df=cleaned_i94_df.withColumn(\"arrival_date\", i94_date_convert(\"arrdate\")).drop(\"arrdate\")\n",
    "cleaned_i94_df.limit(5).toPandas()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>port_code</th>\n",
       "      <th>port_city</th>\n",
       "      <th>port_state</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ALC</td>\n",
       "      <td>ALCAN</td>\n",
       "      <td>AK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ANC</td>\n",
       "      <td>ANCHORAGE</td>\n",
       "      <td>AK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>BAR</td>\n",
       "      <td>BAKER AAF - BAKER ISLAND</td>\n",
       "      <td>AK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DAC</td>\n",
       "      <td>DALTONS CACHE</td>\n",
       "      <td>AK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PIZ</td>\n",
       "      <td>DEW STATION PT LAY DEW</td>\n",
       "      <td>AK</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  port_code                 port_city port_state\n",
       "0       ALC                     ALCAN         AK\n",
       "1       ANC                 ANCHORAGE         AK\n",
       "2       BAR  BAKER AAF - BAKER ISLAND         AK\n",
       "3       DAC             DALTONS CACHE         AK\n",
       "4       PIZ    DEW STATION PT LAY DEW         AK"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get port city, state from SAS text file\n",
    "with open(\"./I94_SAS_Labels_Descriptions.SAS\") as f:\n",
    "    content = f.readlines()\n",
    "all_ports = [x.strip() for x in content[302:962]]\n",
    "\n",
    "split_port = [port.split(\"=\") for port in all_ports]\n",
    "port_codes = [x[0].replace(\"'\",\"\").strip() for x in split_port]\n",
    "city_to_state = [x[1].replace(\"'\",\"\").strip() for x in split_port]\n",
    "port_cities = [x.split(\",\")[0] for x in city_to_state]\n",
    "port_states = [x.split(\",\")[-1] for x in city_to_state]\n",
    "ports_df = pd.DataFrame({\"port_code\" : port_codes, \"port_city\": port_cities, \"port_state\": port_states})\n",
    "all_ports_valid = {a:[b, c] for a, b, c in zip(port_codes, port_cities, port_states)}\n",
    "ports_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['W55', 'WAS', 'PFN', 'WTR', 'SP0', 'STN', 'BCM', 'PCW', 'WA5', 'RYY', 'ATW', 'GMT', '060', 'AMT', 'MAP', 'NC8', 'Y62', 'JSJ', 'CXO', 'OGS', 'LIT', 'HRL', 'BKF', 'CLX', 'AUH', 'ADU', 'NK', 'JMZ', 'XNA', 'FTB', '74S', 'NGL', 'GPI', 'A2A', 'XXX', 'OLM', 'ASI', 'OTS', 'CP', 'DAY', 'VMB', 'SUS', 'X44', 'CPX', 'FRG', 'SCH', 'PLB', 'NYL', 'JBQ', 'TIW', 'FSC', 'OSN', 'EGE', 'GAC', 'CHN', 'PHN', 'MAA', 'OAI', 'IAG', 'YGF', '5T6', 'BUS', 'AKT', 'X96', 'JIG', 'ISP', 'T01', 'ZZZ', 'DEC', '888', 'AG', 'DRV', 'MTH', 'PHF', '.GA', 'JFA', 'UNK']\n"
     ]
    }
   ],
   "source": [
    "# join valid city with states and then get only invalid ports in a list\n",
    "invalid_ports = ports_df[ports_df[\"port_city\"] == ports_df[\"port_state\"]]\n",
    "invalid_ports = list(set(invalid_ports[\"port_code\"].values))\n",
    "print(invalid_ports)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2995590"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get only valid cities by validating cities with the invalid list of ports\n",
    "cleaned_i94_df = cleaned_i94_df[~cleaned_i94_df[\"city\"].isin(invalid_ports)]\n",
    "# number of rows after cleaning i94 immigration data\n",
    "cleaned_i94_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----+-----+----+------+---------+---------+-----+------------+\n",
      "|    id|city|state| age|gender|trip_type|visa_type|count|arrival_date|\n",
      "+------+----+-----+----+------+---------+---------+-----+------------+\n",
      "| 936.0| NEW|   NY|50.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "| 976.0| NEW|   NY|46.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "| 978.0| NEW|   NY|32.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|1485.0| NYC|   NY|43.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|1603.0| LOS|   NV|31.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|1623.0| MIA|   FL|53.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|2203.0| CHI|   IL|47.0|     M|      1.0|       B1|  1.0|  2016-04-01|\n",
      "|2291.0| CHI|   IL|64.0|     M|      2.0|       B2|  1.0|  2016-04-01|\n",
      "|2372.0| NYC|   NY|49.0|     M|      2.0|       B2|  1.0|  2016-04-01|\n",
      "|2973.0| NEW|   NY|44.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|3114.0| NYC|   NY|22.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|3752.0| MIA|   GA|40.0|     M|      2.0|       B2|  1.0|  2016-04-01|\n",
      "|4007.0| NYC|   AL|39.0|  null|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|4056.0| NYC|   NY|70.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|4149.0| NYC|   NY|25.0|  null|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|4212.0| OAK|   CA|37.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|4383.0| SFR|   CA|34.0|  null|      1.0|       WB|  1.0|  2016-04-01|\n",
      "|4397.0| NYC|   NY|48.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|4626.0| BOS|   MA|19.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|4837.0| DEN|   CO|20.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "+------+----+-----+----+------+---------+---------+-----+------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cleaned_i94_df.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### Data Exploration of World Temperature Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+-------------------+-----------------------------+-----+-------+--------+---------+\n",
      "|        dt| AverageTemperature|AverageTemperatureUncertainty| City|Country|Latitude|Longitude|\n",
      "+----------+-------------------+-----------------------------+-----+-------+--------+---------+\n",
      "|1743-11-01|              6.068|           1.7369999999999999|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1743-12-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-01-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-02-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-03-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-04-01| 5.7879999999999985|           3.6239999999999997|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-05-01|             10.644|           1.2830000000000001|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-06-01| 14.050999999999998|                        1.347|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-07-01|             16.082|                        1.396|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-08-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-09-01| 12.780999999999999|                        1.454|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-10-01|               7.95|                         1.63|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-11-01|  4.638999999999999|           1.3019999999999998|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1744-12-01|0.12199999999999987|                        1.756|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1745-01-01|-1.3330000000000002|                        1.642|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1745-02-01|             -2.732|                        1.358|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1745-03-01|              0.129|                        1.088|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1745-04-01|              4.042|                        1.138|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1745-05-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "|1745-06-01|               null|                         null|Århus|Denmark|  57.05N|   10.33E|\n",
      "+----------+-------------------+-----------------------------+-----+-------+--------+---------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "8599212"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of rows in the data\n",
    "temp_df.show()\n",
    "temp_df.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - Visulization of nulls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>dt</th>\n",
       "      <th>AverageTemperature</th>\n",
       "      <th>AverageTemperatureUncertainty</th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>364130</td>\n",
       "      <td>364130</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   dt  AverageTemperature  AverageTemperatureUncertainty  City  Country  \\\n",
       "0   0              364130                         364130     0        0   \n",
       "\n",
       "   Latitude  Longitude  \n",
       "0         0          0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# With nulls\n",
    "usa_temp_null = temp_df.select([count(when(col(c).isNull(), c)).alias(c) for c in temp_df.columns]).toPandas()\n",
    "usa_temp_null.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "Since we have small number of nulls compared to our 6 million values in the USA, I am going to drop nulls instead of imputaion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8235082"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop all nulls and check for nulls again\n",
    "cleaned_temp = temp_df.dropna(how='any')\n",
    "cleaned_temp.select([count(when(col(c).isNull(), c)).alias(c) for c in cleaned_temp.columns]).toPandas()\n",
    "cleaned_temp.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - Since we are going to be using temperutre dataset and will join its values with immigration data, we need to choose a PK to join the tow data sources effectively.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----------+------------------+-----------------------------+-----+-------------+--------+---------+---------+\n",
      "|      Date|AverageTemperature|AverageTemperatureUncertainty| City|      Country|Latitude|Longitude|City_code|\n",
      "+----------+------------------+-----------------------------+-----+-------------+--------+---------+---------+\n",
      "|1743-11-01|             3.209|                        1.961|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-04-01|            10.352|                        2.222|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-05-01|            15.487|                        1.867|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-06-01|              20.9|                        1.726|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-07-01|            22.111|                        1.529|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-09-01|            15.424|                        1.752|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-10-01|             9.017|                        1.896|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-11-01|              3.35|                        1.787|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-12-01|            -2.371|                        2.119|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1745-01-01|            -2.826|                        2.299|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1745-02-01|            -2.498|                        2.142|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1745-03-01|             1.353|                        2.011|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1745-04-01|             8.479|                        1.672|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-01-01|            -3.737|                        2.163|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-02-01|            -2.235|                         2.33|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-03-01|              3.01|                         2.55|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-04-01|             9.062|                         1.67|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-05-01|             15.64|                        1.781|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-06-01|            19.328|                        1.523|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1750-07-01|            24.128|                        1.384|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "+----------+------------------+-----------------------------+-----+-------------+--------+---------+---------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Cleaning and Filtering\n",
    "# Get only USA DATA \n",
    "# Round the temperature \n",
    "# Drop nulls from ports column\n",
    "\n",
    "@udf()\n",
    "def city_match_port(city):\n",
    "    '''\n",
    "    Input: City name; from temp_df city column\n",
    "    \n",
    "    Output: create new column of i94port from all_ports_valid to match valid city with valid port code\n",
    "    \n",
    "    '''\n",
    "    for key in all_ports_valid:\n",
    "        if city.lower() in all_ports_valid[key][0].lower():\n",
    "            return key\n",
    "\n",
    "temp_df=temp_df.withColumn(\"i94port\", city_match_port(temp_df.City))\n",
    "\n",
    "\n",
    "cleaned_temp = temp_df.withColumn(\"AverageTemperature\", sf.round(temp_df[\"AverageTemperature\"], 3)) \\\n",
    "                           .withColumn(\"AverageTemperatureUncertainty\", sf.round(temp_df[\"AverageTemperatureUncertainty\"], 3)) \\\n",
    "                           .withColumnRenamed(\"dt\", \"Date\") \\\n",
    "                           .withColumnRenamed(\"i94port\", \"City_code\") \\\n",
    "                           .filter(temp_df[\"Country\"] == \"United States\") \\\n",
    "                           .dropna()\n",
    "cleaned_temp.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - Summary of our 2 Cleaned Datasets "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----+-----+----+------+---------+---------+-----+------------+\n",
      "|    id|city|state| age|gender|trip_type|visa_type|count|arrival_date|\n",
      "+------+----+-----+----+------+---------+---------+-----+------------+\n",
      "| 936.0| NEW|   NY|50.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "| 976.0| NEW|   NY|46.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "| 978.0| NEW|   NY|32.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|1485.0| NYC|   NY|43.0|     M|      2.0|       WT|  1.0|  2016-04-01|\n",
      "|1603.0| LOS|   NV|31.0|     F|      2.0|       WT|  1.0|  2016-04-01|\n",
      "+------+----+-----+----+------+---------+---------+-----+------------+\n",
      "only showing top 5 rows\n",
      "\n",
      "+----------+------------------+-----------------------------+-----+-------------+--------+---------+---------+\n",
      "|      Date|AverageTemperature|AverageTemperatureUncertainty| City|      Country|Latitude|Longitude|City_code|\n",
      "+----------+------------------+-----------------------------+-----+-------------+--------+---------+---------+\n",
      "|1743-11-01|             3.209|                        1.961|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-04-01|            10.352|                        2.222|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-05-01|            15.487|                        1.867|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-06-01|              20.9|                        1.726|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "|1744-07-01|            22.111|                        1.529|Akron|United States|  40.99N|   80.95W|      AKR|\n",
      "+----------+------------------+-----------------------------+-----+-------------+--------+---------+---------+\n",
      "only showing top 5 rows\n",
      "\n",
      "+----------------+-------------+----------+---------------+-----------------+----------------+------------------+------------+----------------------+----------+--------------------+-----+\n",
      "|            City|        State|Median Age|Male Population|Female Population|Total Population|Number of Veterans|Foreign-born|Average Household Size|State Code|                Race|Count|\n",
      "+----------------+-------------+----------+---------------+-----------------+----------------+------------------+------------+----------------------+----------+--------------------+-----+\n",
      "|   Silver Spring|     Maryland|      33.8|          40601|            41862|           82463|              1562|       30908|                   2.6|        MD|  Hispanic or Latino|25924|\n",
      "|          Quincy|Massachusetts|      41.0|          44129|            49500|           93629|              4147|       32935|                  2.39|        MA|               White|58723|\n",
      "|          Hoover|      Alabama|      38.5|          38040|            46799|           84839|              4819|        8229|                  2.58|        AL|               Asian| 4759|\n",
      "|Rancho Cucamonga|   California|      34.5|          88127|            87105|          175232|              5821|       33878|                  3.18|        CA|Black or African-...|24437|\n",
      "|          Newark|   New Jersey|      34.6|         138040|           143873|          281913|              5829|       86253|                  2.73|        NJ|               White|76402|\n",
      "+----------------+-------------+----------+---------------+-----------------+----------------+------------------+------------+----------------------+----------+--------------------+-----+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cleaned_i94_df.show(5)\n",
    "cleaned_temp.show(5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "### Step 3: Define the Data Model\n",
    "#### 3.1 Conceptual Data Model\n",
    "Map out the conceptual data model and explain why you chose that model\n",
    "After cleanding the data, I will use the df to create fact and dimension tables for analysis. The pipline of the mapping the data will be access to create queries from fact table.\n",
    "\n",
    "#### This is table will be from immigration table\n",
    "\n",
    "**cleaned_i94_df**\n",
    "* id\n",
    "* city PK\n",
    "* state\n",
    "* age\n",
    "* gender\n",
    "* trip_type\n",
    "* visa_type\n",
    "* count\n",
    "* arrival_date\n",
    "\n",
    "#### This is table will be from Temprature table\n",
    "\n",
    "**temp_df**:\n",
    "* date\n",
    "* AverageTemperature\n",
    "* AverageTemperatureUncertainty\n",
    "* City\n",
    "* Country\n",
    "* Latitude\n",
    "* Longitude\n",
    "* City_code PK\n",
    "\n",
    "\n",
    "#### This is table will be from Fact table from i94_df and temp_df (joining by city)\n",
    "\n",
    "**demo_df**:\n",
    "* id\n",
    "* city PK (i94_df)\n",
    "* City_code PK (temp_df)\n",
    "* state\n",
    "* age\n",
    "* gender\n",
    "* trip_type\n",
    "* visa_type\n",
    "* count\n",
    "* arrival_date\n",
    "\n",
    "* date\n",
    "* AverageTemperature\n",
    "* AverageTemperatureUncertainty\n",
    "* City\n",
    "* Country\n",
    "* Latitude\n",
    "* Longitude\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#### 3.2 Mapping Out Data Pipelines\n",
    "List the steps necessary to pipeline the data into the chosen data model\n",
    "\n",
    "1. Create 2 dimension tables (immigration, temperature) and fact table\n",
    "2. Use valuable columns for better analysis and partition by City in a monthly basis.\n",
    "3. create fact table to better reach for the data analysis. This will be done by partioning by City on all 2 source of data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "### Step 4: Run Pipelines to Model the Data \n",
    "#### 4.1 Create the data model\n",
    "Build the data pipelines to create the data model.\n",
    "\n",
    "#### - I have already cleaned and prepared all the 3 datasets in step 2. It should be ready for writing the dimension directly to parquet files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "## Limiting Data for proof of concept"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "sample_i94_df = cleaned_i94_df.limit(50000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "sample_cleaned_temp = cleaned_temp.limit(50000)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Creating dimention tables by storing in a new variable\n",
    "i94_dim_table = sample_i94_df\n",
    "temp_dim_table = sample_cleaned_temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "fact = i94_dim_table.join(broadcast(temp_dim_table), i94_dim_table.city == temp_dim_table.City_code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+----+-----+----+------+---------+---------+-----+------------+----------+------------------+-----------------------------+------+-------------+--------+---------+---------+\n",
      "|    id|city|state| age|gender|trip_type|visa_type|count|arrival_date|      Date|AverageTemperature|AverageTemperatureUncertainty|  City|      Country|Latitude|Longitude|City_code|\n",
      "+------+----+-----+----+------+---------+---------+-----+------------+----------+------------------+-----------------------------+------+-------------+--------+---------+---------+\n",
      "|4626.0| BOS|   MA|19.0|     M|      2.0|       WT|  1.0|  2016-04-01|2013-09-01|            15.883|                        1.368|Boston|United States|  42.59N|   72.00W|      BOS|\n",
      "|4626.0| BOS|   MA|19.0|     M|      2.0|       WT|  1.0|  2016-04-01|2013-08-01|            19.579|                        0.336|Boston|United States|  42.59N|   72.00W|      BOS|\n",
      "|4626.0| BOS|   MA|19.0|     M|      2.0|       WT|  1.0|  2016-04-01|2013-07-01|            23.629|                        0.447|Boston|United States|  42.59N|   72.00W|      BOS|\n",
      "|4626.0| BOS|   MA|19.0|     M|      2.0|       WT|  1.0|  2016-04-01|2013-06-01|            19.313|                        0.353|Boston|United States|  42.59N|   72.00W|      BOS|\n",
      "|4626.0| BOS|   MA|19.0|     M|      2.0|       WT|  1.0|  2016-04-01|2013-05-01|            14.309|                        0.331|Boston|United States|  42.59N|   72.00W|      BOS|\n",
      "+------+----+-----+----+------+---------+---------+-----+------------+----------+------------------+-----------------------------+------+-------------+--------+---------+---------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# result of joining two source of datasets\n",
    "fact.show(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### - After I have created the dimension and fact tables, I will write them in parquet file. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# using sample data to write in the workspce and save time but proof of the work and pipline. \n",
    "sample_i94_df.write.mode(\"overwrite\").partitionBy(\"gender\", \"visa_type\").parquet(\"i94\")\n",
    "sample_cleaned_temp.write.mode(\"overwrite\").partitionBy(\"City_code\").parquet(\"temps\")\n",
    "\n",
    "# Write fact table to parquet\n",
    "fact.write.mode(\"overwrite\").partitionBy(\"state\", \"City_code\").parquet(\"immigration_temps\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### 4.2 Data Quality Checks\n",
    "Explain the data quality checks you'll perform to ensure the pipeline ran as expected. These could include:\n",
    " * Integrity constraints on the relational database (e.g., unique key, data type, etc.)\n",
    " * Unit tests for the scripts to ensure they are doing the right thing\n",
    " * Source/Count checks to ensure completeness\n",
    "\n",
    "\n",
    "#### - I a performing simple Data Quality check since we are dealing with sample date, however, if we are going to use full access of the date. Ther will be multiple process for checking since the pipline will have more variable to check."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Passed quality check\n",
      "Passed quality check\n",
      "Passed quality check\n"
     ]
    }
   ],
   "source": [
    "# Perform quality checks here\n",
    "def rows_check(df):\n",
    "    if df.count() > 0:\n",
    "        print(\"Passed quality check\")\n",
    "    else:\n",
    "        print(\"Did not passsed quality check\")\n",
    "rows_check(temp_dim_table)\n",
    "rows_check(i94_dim_table)\n",
    "rows_check(fact)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": [
    "# checking if table exist\n",
    "def table_empty(table):\n",
    "    if value is not table.isEmpty:\n",
    "        print(\"Tables Exist!\")\n",
    "        print(\"Passed Data Quality Check\")\n",
    "    else:\n",
    "        print(\"Tables Do Not Exist!\")\n",
    "        print(\"Failed Data Quality Check\")\n",
    "table_empty(temp_dim_table)\n",
    "table_empty(i94_dim_table)\n",
    "table_empty(fact)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### 4.3 Data dictionary \n",
    "Create a data dictionary for your data model. For each field, provide a brief description of what the data is and where it came from. You can include the data dictionary in the notebook or in a separate file.\n",
    "\n",
    "**cleaned_i94_df**\n",
    "* id: id num of the passenger\n",
    "* city PK; arrival city in the US\n",
    "* state: arrival state in the US\n",
    "* age: age of the passenger at the time of arrival\n",
    "* gender: gender of the passenger\n",
    "* trip_type: reason for entering the US\n",
    "* visa_type: offical Visa for which reason such as student is F1\n",
    "* count: statistic summary of the passenger\n",
    "* arrival_date: arrival_date to the US\n",
    "\n",
    "#### This is table will be from Temprature table\n",
    "\n",
    "**temp_df**:\n",
    "* date: date of the temperature\n",
    "* AverageTemperature: averge num of the temperature in the country\n",
    "* AverageTemperatureUncertainty: shows the oppsite of uncertin avg temp\n",
    "* City: city of recorded temperature\n",
    "* Country: state of recorded temperature\n",
    "* Latitude\n",
    "* Longitude\n",
    "* City_code PK: City_code added for the purpose of joining table\n",
    "\n",
    "\n",
    "#### This is table will be from Fact table from i94_df and temp_df (joining by city)\n",
    "\n",
    "**fact**:\n",
    "* id: id num of the passenger\n",
    "* city PK; arrival city in the US\n",
    "* state: arrival state in the US\n",
    "* age: age of the passenger at the time of arrival\n",
    "* gender: gender of the passenger\n",
    "* trip_type: reason for entering the US\n",
    "* visa_type: offical Visa for which reason such as student is F1\n",
    "* count: statistic summary of the passenger\n",
    "* arrival_date: arrival_date to the US\n",
    "\n",
    "* date: date of the temperature\n",
    "* AverageTemperature: averge num of the temperature in the country\n",
    "* AverageTemperatureUncertainty: shows the oppsite of uncertin avg temp\n",
    "* City: city of recorded temperature\n",
    "* Country: state of recorded temperature\n",
    "* Latitude\n",
    "* Longitude\n",
    "* City_code PK: City_code added for the purpose of joining table\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "#### Step 5: Complete Project Write Up\n",
    "#### **Clearly state the rationale for the choice of tools and technologies for the project**\n",
    " - In this project, I have focued on two data sources. Since these datasets are very large and has over approx 10 million values combined, I have   chose Spark to be the perfect tool in processing large distributed data. Spark can handle multiple datatypes and formats.\n",
    " Also, can help access large data withing shor of time while \n",
    " perfomring such tasks:\n",
    " * cleanining\n",
    " * transormation of datatype and datetime to spark format\n",
    " * droped Nulls\n",
    " * droped duplicates \n",
    " for the optimizing the distribution of the datasets.\n",
    " * visualization of nulls in the dataset\n",
    " * Sampling the data by 50k for optimizing performance in the workspace and showing results\n",
    " * create dimensions and fact tables to pipline the cleaned and processes data sources\n",
    "\n",
    "\n",
    "\n",
    "#### **Propose how often the data should be updated and why**\n",
    "- The data can be updated on regular basis and depends on the data streamline and requirments. Extracting more data by doing aggregation and developing more tables needs updating. The reason is because aggregation takes a lot of processing from the server, so by imporving the the code structure and factroing codes to create generallized scripts overtime.\n",
    "\n",
    "#### **Write a description of how you would approach the problem differently under the following scenarios:**\n",
    "**The data was increased by 100x**\n",
    "- The datasets can be updated by joining 3rd data source such as demographic data which can increase the data by 100x to achive different scencerios.\n",
    "- In order to create such huge pipline, the 3 datasets can be joined by state. Whcih in the end, can be used on creating dashboards, analytical insights for companies.\n",
    "\n",
    "**The data populates a dashboard that must be updated on a daily basis by 7am every day.**\n",
    "- Other solution to automate the data by time, is by using other technologies such as airflow which can create results on demand on a (daily,weakly, monthly, yearly) basis. \n",
    " \n",
    "**The database needed to be accessed by 100+ people.**\n",
    "- since, I have created a schema for to join these data and leverge more insights for the analytics purposes such as finding average monthly temperature per city. This will allow poepole to access such data miggration to get insightfull knowldge. The more data integraion the highier insights people demand. Such as companies, propusing new products and they need to do market research and use different source of data to collect best time for \"go to market\"\n",
    "- I have used a very small part of the data to create a proof of concept of what the data is capable of. The sample is only 50k rows but by accessing to the full data, this will require a high preformance cluster and increasing in the number of nodes to optimize results. This massive integraiton of data sources can be done and benefits many poepole through deplyments in AWS. This will increase the usability of business intellegnce technologies and more analyst on board to access the database.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "editable": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
